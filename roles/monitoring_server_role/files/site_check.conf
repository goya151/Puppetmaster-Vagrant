object CheckCommand "site_check" {
    import "plugin-check-command"
    import "ipv4-or-ipv6"

    command = [ PluginDir + "/check_http" ]

    arguments = {
      "-H" = "$http_vhost$"
      "-I" = "$http_address$"
      "-u" = "$http_uri$"
      "-p" = "$http_port$"
      "-S" = {
        set_if = "$http_ssl$"
      }
      "--sni" = {
        set_if = "$http_sni$"
      }
      "-C" = {
        value = "$http_certificate$"
        description = "Minimum number of days a certificate has to be valid. Port defaults to 443."
      }
      "-J" = {
          value = "$http_clientcert$"
          description = "Name of file contains the client certificate (PEM format)"
      }
      "-K" = {
          value = "$http_privatekey$"
          description = "Name of file contains the private key (PEM format)"
      }
      "-a" = {
          value = "$http_auth_pair$"
          description = "Username:password on sites with basic authentication"
      }
      "--no-body" = {
          set_if = "$http_ignore_body$"
      }
      "-w" = "$http_warn_time$"
      "-c" = "$http_critical_time$"
      "-e" = "$http_expect$"
      "-d" = {
          value = "$http_headerstring$"
          description = "String to expect in the response headers"
      }
      "-s" = {
          value = "$http_string$"
          description = "String to expect in the content"
      }
      "-P" = {
          value = "$http_post$"
          description = "URL encoded http POST data"
      }
      "-j" = {
          value = "$http_method$"
          description = "Set http method (for example: HEAD, OPTIONS, TRACE, PUT, DELETE)"
      }
      "-M" = {
          value = "$http_maxage$"
         description = "Warn if document is more than seconds old"
      }
      "-T" = {
          value = "$http_contenttype$"
          description = "Specify Content-Type header when POSTing"
      }
      "-l" = {
          set_if = "$http_linespan$"
          description = "Allow regex to span newline"
          order = 1
      }
      "-r" = {
          value = "$http_expect_body_regex$"
          description = "Search page for regex"
          order = 2
      }
      "-R" = {
          value = "$http_expect_body_eregi$"
          description = "Search page for case-insensitive regex"
          order = 2
      }
      "--invert-regex" = {
          set_if = "$http_invertregex$"
          description = "Return CRITICAL if found, OK if not"
      }
      "-b" = {
          value = "$http_proxy_auth_pair$"
          description = "Username:password on proxy-servers with basic authentication"
      }
      "-A" = {
          value = "$http_useragent$"
          description = "String to be sent in http header as User Agent"
      }
      "-k" = {
          value = "$http_header$"
          description = "Any other tags to be sent in http header"
      }
      "-E" = {
          set_if = "$http_extendedperfdata$"
          description = "Print additional perfdata"
      }
      "-f" = {
          value = "$http_onredirect$"
          description = "How to handle redirect pages"
      }
      "-m" = {
          value = "$http_pagesize$"
          description = "Minim page size required:Maximum page size required"
      }
      "-t" = {
          value = "$http_timeout$"
          description = "Seconds before connection times out"
        }
    }

    vars.http_address = "$check_address$"
    vars.http_ssl = false
    vars.http_sni = false
    vars.http_linespan = false
    vars.http_invertregex = false
}